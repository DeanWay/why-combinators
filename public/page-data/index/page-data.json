{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"13771980c3a079731eb2","result":{"data":{"deck":{"id":"e628d2fe-5d6c-5bf1-9bc0-37c4ec9a8a1f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Why Combinators?\"), mdx(\"hr\", null), mdx(\"p\", null, \"Combinators are things that combine things\"), mdx(\"div\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, \"Specifically, we're interested in building bigger programs\", mdx(\"br\", null), \"out of smaller ones\"), mdx(\"hr\", null), mdx(\"p\", null, \"Haskell\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\",\n    \"metastring\": \"title=\\\"3 things to know\\\"\",\n    \"title\": \"\\\"3\",\n    \"things\": true,\n    \"to\": true,\n    \"know\\\"\": true\n  }), \"-- definting a function\\nadd x y = x + y\\n-- const add = x => y => x + y\\n\\n-- calling a function\\nadd 1 2\\n-- add(1)(2)\\n\\n-- operators are functions\\nadd = (+)\\n1 `add` 2 == 1 + 2\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:7\",\n    \"4:7\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:12\",\n    \"9:12\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"exclaim s = s ++ \\\"!\\\"\\nquestion s = s ++ \\\"?\\\"\\n\\n-- >>> exclaimedQuestion \\\"what\\\"\\n-- \\\"what!?\\\"\\nexclaimedQuestion s = s ++ \\\"!?\\\"\\nexclaimedQuestion s = question (exclaim s)\\nexclaimedQuestion = question . exclaim\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:2\",\n    \"1:2\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:5\",\n    \"4:5\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\",\n    \"metastring\": \"title=\\\"What the heck is this dot?\\\"\",\n    \"title\": \"\\\"What\",\n    \"the\": true,\n    \"heck\": true,\n    \"is\": true,\n    \"this\": true,\n    \"dot?\\\"\": true\n  }), \"(.) :: (b -> c) -> (a -> b) -> a -> c\\n(.) f g x = f (g x) \\n\\ncontainsWord word = any (== word) . words\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[20:27]\",\n    \"1[20:27]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[8:15]\",\n    \"1[8:15]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[32:37]\",\n    \"1[32:37]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[13:20]\",\n    \"2[13:20]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"isExclamationMark c = c == '!'\\nisQuestionMark c = c == '?'\\nisPeriod c = c == '.'\\n\\nisPunctuation c = isQuestionMark c || isExclamationMark c || isPeriod c\\n\\nisPunctuation = isQuestionMark . isExclamationMark . isPeriod \\n-- error\\n\\norPredicates pred1 pred2 x = pred1 x || pred2 x\\n(<||>) = orPredicates\\n\\nisPunctuation = isQuestionMark <||> isExclamationMark <||> isPeriod\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"10\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"11\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"13\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\",\n    \"metastring\": \"title=\\\"Parser Combinators\\\"\",\n    \"title\": \"\\\"Parser\",\n    \"Combinators\\\"\": true\n  }), \"type Parser a = String -> (a, String)\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"satisfy :: (Char -> Bool) -> Parser Char\\n\\nparseQuestionMark = satisfy isQuestionMark\\nparseExclaimationMark = satisfy isExclamationMark\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"andThenParse :: Parser a -> Parser a -> Parser a\\n\\nparseInterrobang = parseExclaimationMark `andThenParse` parseQuestionMark\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\",\n    \"metastring\": \"file=\\\"./parser.hs\\\" title=\\\"Parser Combinators in Haskell\\\"\",\n    \"file\": \"\\\"./parser.hs\\\"\",\n    \"title\": \"\\\"Parser\",\n    \"Combinators\": true,\n    \"in\": true,\n    \"Haskell\\\"\": true\n  }), \"import Control.Applicative (Alternative (some, (<|>)))\\nimport Text.Parsec.Char (digit, string)\\nimport Text.Parsec.String (Parser)\\n\\noneOrMore = some\\n\\njoint p1 p2 = (++) <$> p1 <*> p2\\n\\nnaturalNumber :: Parser String\\nnaturalNumber = oneOrMore digit\\n\\nnegativeNumber = string \\\"-\\\" `joint` naturalNumber\\n\\ninteger = negativeNumber <|> naturalNumber\\n\\nrealNumber = integer `joint` string \\\".\\\" `joint` naturalNumber\\n\\nnumber = realNumber <|> integer\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:20\",\n    \"9:20\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"file=\\\"./parser.py\\\" title=\\\"Parser Combinators in Python\\\"\",\n    \"file\": \"\\\"./parser.py\\\"\",\n    \"title\": \"\\\"Parser\",\n    \"Combinators\": true,\n    \"in\": true,\n    \"Python\\\"\": true\n  }), \"from parsec import many1 as one_or_more, digit, string, try_choice, joint\\n\\nnatural_number = one_or_more(digit())\\nnegative_number = joint(string(\\\"-\\\"), natural_number)\\ninteger = try_choice(negative_number, natural_number)\\nreal_number = joint(integer, string(\\\".\\\"), natural_number)\\nnumber = try_choice(real_number, integer)\\n\\n# >>> number.parse(\\\"-12\\\")\\n# ('-', ['1', '2'])\\n\"))), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"e628d2fe-5d6c-5bf1-9bc0-37c4ec9a8a1f","slug":"","title":"Why Combinators?"}}}